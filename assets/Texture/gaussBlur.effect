// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        Strength: { value: 0.01 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
    in vec2 v_uv0;
    uniform sampler2D texture;
  #endif

  uniform FragConstants {
    float Strength;
  };
  
  vec4 draw(vec2 uv) {
      return texture2D(texture, uv).rgba;
  }
  float grid(float var, float size) {
      return floor(var* size) /size;
  }
  float rand(vec2 co){
      return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);
  }
  void mainImage(out vec4 fragColor, in vec2 fragCoord)
  {
      vec2 uv = v_uv0.xy;
      vec4 blurred_image = vec4(0.);
      #define repeats 40.
      for (float i = 0.; i < repeats; i++) {
          vec2 q = vec2(cos(degrees((i / repeats) * 360.)), sin(degrees((i / repeats) * 360.))) * (rand(vec2(i, uv.x + uv.y)) + Strength);
          vec2 uv2 = uv + (q * Strength);
          blurred_image += draw(uv2) / 2.;
          q = vec2(cos(degrees((i / repeats) * 360.)), sin(degrees((i / repeats) * 360.))) * (rand(vec2(i + 2., uv.x + uv.y + 24.)) + Strength);
          uv2 = uv + (q * Strength);
          blurred_image += draw(uv2) / 2.;
      }
      blurred_image /= repeats;
      fragColor = vec4(blurred_image);
  }
  void main()
  {
      mainImage(gl_FragColor, gl_FragCoord.xy);
  }
}%
